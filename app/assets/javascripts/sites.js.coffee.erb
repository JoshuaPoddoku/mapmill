# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/


$(document).ready ->
  $.ajaxSetup headers:
    "X-CSRF-Token": $("meta[name=\"csrf-token\"]").attr("content")

  $uploadList = $('#upload-list')
  $url = $("#s3-data").data("url")
  upload_btn = $('#upload_selected')
  file_list = []

  # trigger file upload browser on Browse click
  $('#browse').click () ->
    $('#fileupload').click()

  formatFileSize = (bytes) ->
    return ""  if typeof bytes isnt "number"
    return (bytes / 1000000000).toFixed(2) + " GB"  if bytes >= 1000000000
    return (bytes / 1000000).toFixed(2) + " MB"  if bytes >= 1000000
    (bytes / 1000).toFixed(2) + " KB"


  $("#fileupload").fileupload({
    xhrFields: {withCredentials: true},
    url: $url,
    type: 'POST',
    autoUpload: false,
    acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
    maxFileSize: 9000000,
    dataType: 'xml',
    formData: $("#s3-data").data("fields"), 
    paramName: 'file',
    dropZone: $('#upload-area'),
    add: (e, data) ->
      if file_list.length > 0
        upload_btn.prop('disabled', false);
      for file in data.files
        #console.log file
        reader = new FileReader()
        reader.onloadend = ->
          scale = 0.15
          original = reader.result
          img = new Image() 
          img.src = original 
          img.onload = () ->
            canvas = document.createElement("canvas")
            canvas.width = img.width * scale
            canvas.height = img.height * scale
            
            canvas.getContext("2d").drawImage img, 0, 0, canvas.width, canvas.height

            #tpl = $('<div class="col-xs-6 col-md-3"><div class="thumbnail"><div class="knob-progress working"><input type="text" value="0" data-width="100" data-height="100"'+ ' data-fgColor="#0788a5" data-readOnly="1" data-bgColor="#3e4043" /></div><img src="" alt="Upload thumbnail"/><div class="caption"></div><span></span></div></div>')
            tpl = $('<div class="col-xs-6 col-md-3"><div class="thumbnail"><div class="knob-progress working"><input type="text" value="0" data-width="100" data-height="100"'+ ' data-fgColor="#0788a5" data-readOnly="1" data-bgColor="#3e4043" /></div><div class="caption"></div><span></span></div></div>')
            # add image source
            #tpl.find("img").get(0).src = reader.result 
            tpl.find(".thumbnail").append(canvas)
            #file.thumbnail = canvas.toDataURL()
            file.thumbnail = canvas
            # add click handler to thumbnails so they can be selected
            tpl.find('.thumbnail').click ->
              if $(this).hasClass 'selected_img'
                $(this).removeClass 'selected_img'
                idx = file_list.indexOf(file)
                if idx > -1
                  file_list.splice(idx, 1) 
                $("#upload-msg").append('Image ' + file.name + " removed from upload queue<br/>")
              else
                $(this).addClass 'selected_img'
                file_list.push(file)
                $("#upload-msg").append('Image ' + file.name + " added to upload queue<br/>")
                
              return
            # Append the file name and file size
            tpl.find(".caption").text(file.name).append "<i><br/>" + formatFileSize(file.size) + "</i>"
            # Add the HTML to the UL element
            data.context = tpl.appendTo($uploadList)
            # Initialize the knob plugin
            tpl.find("input").knob()
            # Listen for clicks on the cancel icon
            #tpl.find("span").click ->
            #  jqXHR.abort()  if tpl.hasClass("working")
            #  tpl.fadeOut ->
            #    tpl.remove()

            #Automatically upload the file once it is added to the queue
            #jqXHR = data.submit()

        reader.readAsDataURL file
        $('#upload_selected').on('click', () ->
          data.submit()
        )

    progress: (e, data) ->
     if data.context
        # Calculate the completion percentage of the upload
        progress = parseInt(data.loaded / data.total * 100, 10)
        #$('#upload-status').text(progress)
        # Update the hidden input field and trigger a change
        # so that the jQuery knob plugin knows to update the dial
        data.context.find(".knob-progress").show()
        data.context.find("input").val(progress).change()
        data.context.removeClass "working"  if progress is 100

    progressall: (e, data) -> 
      progress = parseInt(data.loaded / data.total * 100, 10)
      $(".progress-bar").css('width', progress + '%')
      $(".progress-bar").attr('aria-valuenow', progress)
      $(".progress-bar").text(progress + '%')

    done: (e, data) -> 
      #$(".progress-bar").text("Upload terminated!")
      #upload_btn.prop('disabled', true);


      for file in data.files

        if file.isThumbnail
          key  = $(data.jqXHR.responseXML).find("Key").text()
          put_data =
            thumbnail: '//' + $('#s3-data').data('host') + '/' + key
 
          $.ajax({
            url: "/images/" + file.image_id + '/set_thumbnail', 
            type: 'PUT',
            dataType: "json",
            data: put_data 
          }).done( (response) ->
              $("#upload-msg").append('Thumbnail successfully associated to image ' + file.image_id  + "<br/>")
            ).fail( (response) ->
              $("#upload-msg").append('Thumbnail failed to be associated to image ' + file.image_id  + "<br/>")
            )

        else
          $("#upload-msg").append('Image ' + file.name + " successfully uploaded<br/>")

          #extract key and generate URL from response
          site = $('#site_id').val()
          key  = $(data.jqXHR.responseXML).find("Key").text()
          post_data =
            site_id: site 
            url: '//' + $('#s3-data').data('host') + '/' + key

          $.ajax({
            url: "/sites/" + site + "/images", 
            type: 'POST',
            dataType: "json",
            data: post_data
          }).done( (response) ->
            #img = new Image()
            #img.src = file.thumbnail.toDataURL('image/png')
            #arr = []
            #arr.push(img)
            #thumb = new Blob(arr)
            file.thumbnail.toBlob( (blob) ->
              blob.isThumbnail = true
              last = file.name.lastIndexOf('.')
              ext  = file.name.substr(last)
              blob.name = file.name.substr(0, last) + '_thumb' + ext
              blob.image_id = response.id
              flist = []
              flist.push(blob)
              $("#fileupload").fileupload("send", {files: flist})
            )
            $("#upload-msg").append('<p style="color: green">Image ' + file.name + " successfully saved to site</p><br/>")
            return
          ).fail( (xhr, textStatus, errorThrown) ->
            $("#upload-msg").append('<i style="color: red">Image ' + file.name + " failed to be associated to site! " + xhr.responseText + "</i><br/>")
            console.log textStatus
            console.log errorThrown
            return
          )
          #create hidden field
          #var input = $("<input />", { type:'hidden', name: fileInput.attr('name'), value: url })
          #form.append(input);

    start: (e) ->
      $(".progress-section").addClass('in')

    fail: (e, data) ->
      $('.alert').show()
      $(".progress-bar").css("background", "red")
      $(".progress-bar").text("Upload failed!")

  })

  $(document).on "drop dragover", (e) ->
      e.preventDefault()

getThumbnail = (original, scale) ->
  img = new Image() 
  img.src = original 
  img.onload = () ->
    canvas = document.createElement("canvas")
    canvas.width = img.width * scale
    canvas.height = img.height * scale
    #canvas.width = $(this).width() 
    #canvas.height = $(this).height() 
    
    canvas.getContext("2d").drawImage img, 0, 0, canvas.width, canvas.height
    canvas
